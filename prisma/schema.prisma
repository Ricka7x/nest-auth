// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
  COLLABORATOR
}

model Account {
  id                 String  @id @default(uuid())
  userId             String @map("user_id")
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String  @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  roles         Role[]    @default([USER])
  isActive      Boolean   @default(true) @map("is_active")
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // Added password field
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  likes         Like[]

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  subscriptionStatus String?  

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ProcessedEvent {
  id        String   @id
  createdAt DateTime @default(now())

  @@map("processed_events")
}


model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  cover     String?
  content   Json?
  excerpt   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  comments Comment[]
  tags    Tag[]
  likes   Like[]

  authorId  String @map("author_id")
  author User @relation(fields: [authorId], references: [id])
  
  @@map("posts")
  @@index([ slug ])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  authorId  String @map("author_id")
  postId String @map("post_id")

  author User @relation(fields: [authorId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("comments")
}


model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  posts     Post[]

  @@map("tags")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  
  authorId  String @map("author_id")
  postId String @map("post_id")

  author User @relation(fields: [authorId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@map("likes")
}
